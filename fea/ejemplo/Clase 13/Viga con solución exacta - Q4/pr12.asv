close all
clear all
clc

Nmallas=4;

Dmax=zeros(1,Nmallas);
Ene=zeros(1,Nmallas);
maxvex=zeros(1,Nmallas);
for m=1:Nmallas
    if m==1
        nodes=load('nodos10x2.txt');
        nodes=nodes(:,[2,3]);
        elements=load('elementos10x2.txt');
        elements=elements(:,2:5);
    end
    if m==2
        nodes=load('nodos20x4.txt');
        nodes=nodes(:,[2,3]);
        elements=load('elementos20x4.txt');
        elements=elements(:,2:5);
    end
    if m==3
        nodes=load('nodos30x6.txt');
        nodes=nodes(:,[2,3]);
        elements=load('elementos30x6.txt');
        elements=elements(:,2:5);
    end
    if m==4
        nodes=load('nodos40x8.txt');
        nodes=nodes(:,[2,3]);
        elements=load('elementos40x8.txt');
        elements=elements(:,2:5);
    end
    
    nDofNod = 2;                    % Nï¿½mero de grados de libertad por nodo
    nNodEle = 4;                    % Nï¿½mero de nodos por elemento
    nel = size(elements,1);         % Nï¿½mero de elementos
    nNod = size(nodes,1);           % Nï¿½mero de nodos
    nDofTot = nDofNod*nNod;         % Nï¿½mero de grados de libertad
    
    
    bc = false(nNod,nDofNod);       % Matriz de condiciones de borde
    a=find(nodes(:,1)==100);
    b=find(nodes(a,2)==0);
    bc(a,1) = true;
    bc(a(b),2)=true;
    
    % Cargas (CORREGIR)
    R = zeros(nNod,nDofNod);        % Vector de cargas
    p=80/20;
    aux=find(nodes(:,1)==0);
    l=abs(nodes(aux(2),2)-nodes(aux(1),2));
    R(aux,2)=p*l;
    aux2=find(nodes(aux,2)==-10);
    R(aux(aux2),2)=p*l/2;
    aux2=find(nodes(aux,2)==10);
    R(aux(aux2),2)=p*l/2;
    
    % Geometría
    c=10;
    L=100;

    h(m) = sqrt((L*2*c)/nel);
    
    % Propiedades del material
    E = 1000;
    NU = 0.25;
    I=1*20^3/12;
    G=E/(2+2*NU);

    Uex=ex_sol(nodes(:,1),nodes(:,2),'fun');
    maxUex(m)=max(max(abs(Uex)));     %me guardo el maximo desplazamiento en y exacto
    figure
    meshplot(elements,nodes+Uex,'b')
    %% Matriz Constitutiva (plane stress)
    
    C = E/(1 - NU^2)*[ 1.0     NU         0.0
        NU    1.0         0.0
        0.0    0.0     (1 - NU)/2 ];
    
    
    %% Gauss
    a   = 1/sqrt(3);
    % Ubicaciones puntos de Gauss
    upg = [ -a  -a
        a  -a
        a   a
        -a   a ];
    % Nï¿½mero de puntos de Gauss
    npg = size(upg,1);
    wpg = ones(npg,1);
    
    %% Matriz de rigidez
    K = zeros(nDofTot);
    nodeDofs = reshape(1:nDofTot,nDofNod,nNod)';
    for iele = 1:nel
        Ke = zeros(nDofNod*nNodEle);
        nodesEle = nodes(elements(iele,:),:);
        for ipg = 1:npg
            % Punto de Gauss
            ksi = upg(ipg,1);
            eta = upg(ipg,2);
            % Derivadas de las funciones de forma respecto de ksi, eta
            dN = 1/4*[-(1-eta)   1-eta    1+eta  -(1+eta)
                -(1-ksi) -(1+ksi)   1+ksi    1-ksi ];
            % Derivadas de x,y, respecto de ksi, eta
            jac = dN*nodesEle;
            % Derivadas de las funciones de forma respecto de x,y.
            dNxy = jac\dN;          % dNxy = inv(jac)*dN
            
            B = zeros(size(C,2),nDofNod*nNodEle);
            B(1,1:2:7) = dNxy(1,:);
            B(2,2:2:8) = dNxy(2,:);
            B(3,1:2:7) = dNxy(2,:);
            B(3,2:2:8) = dNxy(1,:);
            
            Ke = Ke + B'*C*B*wpg(ipg)*det(jac);
        end
        eleDofs = nodeDofs(elements(iele,:),:);
        eleDofs = reshape(eleDofs',[],1);
        K(eleDofs,eleDofs) = K(eleDofs,eleDofs) + Ke;
    end
    
    %% Reducción Matriz
    isFixed = reshape(bc',[],1);
    isFree = ~isFixed;
    
    Rr = reshape(R',[],1);
    
    % Solver
    Dr = K(isFree,isFree)\Rr(isFree);
    
    % Reconstrucción
    U = zeros(nDofTot,1);
    U(isFree) = U(isFree) + Dr;
    
    
    % Reacciones
    Rv = K(isFixed,isFree)*U(isFree);
    reacciones = nan(nDofTot,1);
    reacciones(isFixed) = Rv;
    reacciones = (reshape(reacciones,nDofNod,[]))';
    
    %% Recuperación de tensiones en los nodos
    stress = zeros(nel,nNodEle,3);
    uNod = [ -1 -1
        1 -1
        1  1
        -1  1 ];
    Ene(m)=0;
    a   = 1/sqrt(3);
    % Ubicaciones puntos de Gauss
    upg = [ -a  -a
        a  -a
        a   a
        -a   a ];
    % Nï¿½mero de puntos de Gauss
    npg = size(upg,1);
    wpg = ones(npg,1);
    
    for iele = 1:nel
        nodesEle = nodes(elements(iele,:),:);
        for inode = 1:nNodEle
            % Punto de Gauss
            ksi = uNod(inode,1);
            eta = uNod(inode,2);
            % Derivadas de las funciones de forma respecto de ksi, eta
            dN = 1/4*[-(1-eta)   1-eta    1+eta  -(1+eta)
                -(1-ksi) -(1+ksi)   1+ksi    1-ksi ];
            % Derivadas de x,y, respecto de ksi, eta
            jac = dN*nodesEle;
            % Derivadas de las funciones de forma respecto de x,y.
            dNxy = jac\dN;          % dNxy = inv(jac)*dN
            
            B = zeros(size(C,2),nDofNod*nNodEle);
            B(1,1:2:7) = dNxy(1,:);
            B(2,2:2:8) = dNxy(2,:);
            B(3,1:2:7) = dNxy(2,:);
            B(3,2:2:8) = dNxy(1,:);
            
            eleDofs = nodeDofs(elements(iele,:),:);
            eleDofs = reshape(eleDofs',[],1);
            stress(iele,inode,:) = C*B*U(eleDofs);
            Ene(m)=Ene(m)+wpg(ipg)*(B*U(eleDofs))'*C*B*U(eleDofs)*det(jac)/2;
        end
    end
    %% Configuracion deformada
    U = (reshape(U,nDofNod,[]))';
    nodePosition = nodes + U(:,1:2);
    Umax(m)=max(max(abs(U)));
    e(m) = max(max(abs(Uex - U)));
    % Gráficos
    bandplot(elements,nodePosition,stress(:,:,1),[],'k');
    meshplot(elements,nodes,'b')

end
% Exact energy
Eneex = integral2(fun,0,L,-c,c)

figure
plot(h,Ene,h,Eneex)
xlabel('longitud h')
ylabel('Energia')
figure
loglog(h,e)
xlabel('longitud h')
ylabel('error en desplazamientos')